angular.module("ngSecured",["ui.router","angular-cache","ngSecured.services"]),angular.module("ngSecured.services",["ui.router"]),angular.module("ngSecured").constant("ngSecured.cacheKeys",{LOGIN_CACHE:"loginCache",TOKEN:"token",PERMISSIONS_CACHE:"permissionsCache",PERMISSIONS:"permissions"}),angular.module("ngSecured").constant("ngSecured.cacheOptions",{timeout:{FOREVER:"forever"},location:{LOCAL_STORAGE:"localStorage",SESSION_STORAGE:"sessionStorage"},cacheKeys:{MAIN_CACHE:"ngSecuredCache",LOGIN_CACHE:"loginCache",IS_LOGGED_IN:"isLoggedIn",ROLES:"roles"}}),function(a){var b="private__ngSecured";a.module("ngSecured").constant("ngSecured.defaultStateNames",{BASE_STATE:b,NOT_AUTHENTICATED:b+".notAuthenticated",NOT_AUTHORIZED:b+".notAuthorized"})}(angular),angular.module("ngSecured").directive("asRole",["ngSecured","$animate",function(a,b){return{transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(c,d,e,f,g){function h(a){var b=a[0],c=a[a.length-1];if(b===c)return angular.element(b);var d=b,e=[d];do{if(d=d.nextSibling,!d)break;e.push(d)}while(d!==c);return angular.element(e)}function i(){a.includesRole(l)?k||(k=c.$new(),g(k,function(a){a[a.length++]=document.createComment(" end asRole: "+e.asRole+" "),j={clone:a},b.enter(a,d.parent(),d)})):(j&&(b.leave(h(j.clone)),j=null),k&&(k.$destroy(),k=null))}var j,k,l;c.$watch(function(){return e.asRole},function(a){l=a,i()}),c.$watch(function(){return a.getRoles()},i)}}}])(function(){function a(a){function c(a){d()}function d(){function b(a,b){function c(a){}function d(a){return b.reject(a)}return{request:c,responseError:d}}a.interceptors.push(b),b.$inject=["$injector","$q"]}this.setupPages=c,this.$get=b}function b(){var a={};return a}angular.module("ngSecured").provider("ngSecured.httpManager",a),a.$inject=["$httpProvider"],b.$inject=[]})(),function(){function a(){function a(a){angular.extend(c,a)}this.setup=a,this.$get=b}function b(a,b,d,e,f){function g(b){function d(a){var b;c.tokenAgeJsonPath&&(b=e(c.tokenAgeJsonPath)(a.data),b||console.warn("Can't find maxAgeResponsePath '"+c.tokenAgeJsonPath+"', just so you know"));var d=e(c.tokenJsonPath)(a.data);return d?(i(),j(d,b),a.data):f.reject("Couldn't find the token on the response in the path - '"+c.tokenJsonPath+"', check your configuration")}return a.post(c.loginUrl,b).then(d)}function h(){return!!k()}function i(){m=null;var a=l();a&&a.remove(b.TOKEN)}function j(a,e){e||(e=c.defaultTokenAge),m=a;var f=d(b.LOGIN_CACHE,{maxAge:e});f.put(b.TOKEN,a)}function k(){if(m)return m;var a=l();return a?a.get(b.TOKEN):void 0}function l(){return d.get(b.LOGIN_CACHE)}var m,n={};return n.login=g,n.isLoggedIn=h,n.logout=i,n.getToken=k,n.setToken=j,n}angular.module("ngSecured").provider("ngSecured.loginDao",a);var c={loginUrl:"",tokenJsonPath:"",tokenAgeJsonPath:"",defaultTokenAge:36e5};a.$inject=[],b.$inject=["$http","ngSecured.cacheKeys","CacheFactory","$parse","$q"]}(),function(){function a(a,b,c,d,e){function f(a,b){function c(c){function d(a){return b.goToPostLoginPage(),a}return a.login(c).then(d)}function d(){a.logout(),b.goToPostLogoutPage()}function e(){return a.isLoggedIn()}var f={};return f.login=c,f.logout=d,f.isLoggedIn=e,f}var g={pages:{tokenAgeJsonPath:"",tokenJsonPath:"",loginUrl:"",permissionsUrl:"",pages:{login:"ngSecured.login",loginPopup:null,unAuthorized:null,postLogin:null,postLogout:null}}};this.secure=function(a){angular.extend(g,a),c.setup(g),d.setup(g),e.setupPages(g.pages)},this.$get=f,f.$inject=["ngSecured.loginDao","ngSecured.pageGuard"]}angular.module("ngSecured").provider("ngSecured",a),a.$inject=["$stateProvider","$httpProvider","ngSecured.loginDaoProvider","ngSecured.permissionsDaoProvider","ngSecured.pageGuardProvider"]}(),function(){function a(a){function d(a){angular.extend(c,a)}this.setupPages=d,this.$get=b}function b(a,b,d,e,f,g){function h(){a.$on("$stateChangeStart",q._handleStateChange)}function i(a,b,d,g,h){function i(a){function h(a){var h,i,j=a.requestApprovalState;if(a.answer===!0)e.go(b.name,d);else if(j){if(angular.isString(j)?h=j:angular.isObject(j)&&(h=j.name,i=j.params),!h)throw new Error('requestApprovalState must have a "name" property');e.go(h,i)}else f.isLoggedIn()?e.go(c.unAuthorized):(q.setLastDeniedStateAndParams(b,d),q._goToLogin(g.name,k))}q._isRouteApproved(a).then(h)}var j,k=!0;b.data&&(j=b.data.secured),j&&(j!==!0||f.isLoggedIn()||(a.preventDefault(),q.setLastDeniedStateAndParams(b,d),q._goToLogin(g.name,k)),angular.isString(j)&&(a.preventDefault(),i(j)))}function j(a,b){p={state:a,params:b}}function k(){return p}function l(a,b){""!==a&&b?e.go(c.loginPopup):e.go(c.login)}function m(a){function c(b){f={setupListeners:h,permissions:b};var c={securityContext:f};d(a,c)}var e,f,h={},i={};return e=b.defer(),a||e.reject("You must define pass a valid securityController name"),h.allow=function(){i.answer=!0,e.resolve(i)},h.deny=function(a){i.answer=!1,i.requestApprovalState=a,e.resolve(i)},g.getPermissions().then(c),e.promise}function n(){p?e.go(p.state.name,p.params):e.go(c.postLogin)}function o(){e.current&&e.current.data.secured&&e.go(c.postLogout)}var p,q={};return q.setupListeners=h,q.goToPostLoginPage=n,q.goToPostLogoutPage=o,q.setLastDeniedStateAndParams=j,q.getLastDeniedStateAndParams=k,q._handleStateChange=i,q._goToLogin=l,q._isRouteApproved=m,q}angular.module("ngSecured.services").provider("ngSecured.pageGuard",a);var c={login:"ngSecured.login",loginPopup:null,postLogin:null,unAuthorized:null};a.$inject=["$stateProvider"],b.$inject=["$rootScope","$q","$controller","$state","ngSecured.loginDao","ngSecured.permissionsDao"]}(),function(){function a(){function a(a){angular.extend(c,a)}function b(a,b,d,e){function f(b){function f(a){var b=a.data,c=g();return c.put(d.PERMISSIONS,b),i=b,b}return!b&&(i=h())?e.when(i):a.get(c.permissionsUrl).then(f)}function g(){var a=b.get(d.PERMISSIONS_CACHE);return a||(a=b(d.PERMISSIONS_CACHE)),a}function h(){if(i)return i;var a=g();return i=a.get(d.PERMISSIONS)}var i,j={};return j.getPermissions=f,j}var c={permissionsUrl:""};this.setup=a,this.$get=b,b.$inject=["$http","CacheFactory","ngSecured.cacheKeys","$q"]}angular.module("ngSecured.services").provider("ngSecured.permissionsDao",a),a.$inject=[]}();